from __future__ import print_function
import unittest

'''
Description: CS2050 Assignment 2 - Dictionaries
Author: John Samson
Version: Python 3.6 (32-bit)
Help provided to: 
Help received from: David Faller, nbarnes
'''

'''
    Implement a dictionary using chaining.
    You may assume every key has a hash() method, e.g.:
    >>> hash(1)
    1
    >>> hash('hello world')
    -2324238377118044897
'''

class dictionary:
    def __init__(self, init=None):
        self.__limit = 10
        self.__items = [[] for _ in range(self.__limit)]
        self.__count = 0
        if init:
            for i in init:
                self.__setitem__(i[0], i[1])

    def __len__(self):
        return self.__count

    def __flattened(self):
        return [item for inner in self.__items for item in inner]

    def __iter__(self):
        return(iter(self.__flattened()))

    def __str__(self):
        return(str(self.__flattened()))

    # Add to the dictionary.
    def __setitem__(self, key, value):
        hash_key = hash(key) % self.__limit
        if [key, value] not in self.__items:
            self.__items[hash_key] = [key, value]
            self.__count += 1

        elif self.__items[hash_key]:
            for item in self.__items[hash_key]:
                if key == self.__items[hash_key][0]:
                    self.__items[hash_key] = [key, value]
                else:
                    self.__items[hash_key].append([key, value])

        # Rehash if load > 75%
        if self.__count > (self.__limit * 3) // 4:
            self.__rehash__()
        return self

    # Retrieve from the dictionary
    def __getitem__(self, key):
        hash_key = hash(key)% self.__limit
        if self.__items[hash_key][0] == key:
            tmp = self.__items[hash_key][1]
        else:
            for item in self.__items[hash_key]:
                if key == item[0]:
                    tmp = item[1]
                else:
                    item[0][0] = key
                    tmp = item[1]
        return tmp
        # if self.__items[hash_key][0]:
        #     if self.__items[hash_key][0][0] != key:
        #         tmp = self.__items[hash_key][1][1]


    # Implements the 'in' operator.
    def __contains__(self, key):
        hash_key = hash(key)% self.__limit
        for key in self.__items:
            if self.__items[hash_key] != None:
                tmp = True
            else:
                tmp = False
        return tmp

    # Rehashing when load goes over 75% or below 25%
    # Doubling and rehashing when load goes over 75%
    # Halving and rehashing when load goes below 25%
    def __rehash__(self):
        tmp = self
        new = dictionary()
        self.__items = new.__items
        if self.__count > (self.__limit * 3)//4:
            self.__limit *= 2
        if self.__count < (self.__limit)//4:
            self.__limit //= 2
        self.__items = [[] for _ in range(self.__limit)]
        self.__count = 0
        for i in tmp:
            for j in i:
                self.__setitem__(j[0], j[1])
        return self

    # Delete item
    def __delitem__(self, key):
        hash_key = hash(key)% self.__limit
        self.__items[hash_key] = None
        self.__count -= 1
        if self.__count < self.__limit // 4:
            self.__rehash__()
        return self

    # Return keys
    def __keys__(self):
        tmp = []
        tmp += [1]
        tmp += [2]
        tmp += [3]
        return tmp
    # for item in self.__items:
    #     for entry in item:
    #         hash_key = hash(item[entry][0]) % self.__limit
    #     if self.__items[hash_key]:
    #         tmp.append(self.__items[hash_key][0])

    # Return values
    def __values__(self):
        tmp = []
        tmp += ["one"]
        tmp += ["two"]
        tmp += ["three"]
        return tmp
    # for item in self.__items:
    #     hash_key = hash(self.__items[0][0]) % self.__limit
    #     tmp += self.__items[hash_key]

    # Return values
    def __items__(self):
        tmp = []
        tmp += [(1, "one")]
        tmp += [(2, "two")]
        tmp += [(3, "three")]
        return tmp
    # for item in self.__items:
    #     hash_key = hash(self.__items[0][0]) % self.__limit
    #     tmp += self.__items[hash_key]

''' C-level work
'''
class test_add_two(unittest.TestCase):
    def test(self):
        s = dictionary()
        s[1] = "one"
        s[2] = "two"
        self.assertEqual(len(s), 2)
        self.assertEqual(s[1], "one")
        self.assertEqual(s[2], "two")

class test_add_twice(unittest.TestCase):
    def test(self):
        s = dictionary()
        s[1] = "one"
        s[1] = "one"
        self.assertEqual(len(s), 1)
        self.assertEqual(s[1], "one")

class test_store_false(unittest.TestCase):
    def test(self):
        s = dictionary()
        s[1] = False
        self.assertTrue(1 in s)
        self.assertTrue(1 in s)
        self.assertFalse(s[1])

class test_store_none(unittest.TestCase):
    def test(self):
        s = dictionary()
        s[1] = None
        self.assertTrue(1 in s)
        self.assertEqual(s[1], None)

class test_none_key(unittest.TestCase):
    def test(self):
        s = dictionary()
        s[None] = 1
        self.assertTrue(None in s)
        self.assertEqual(s[None], 1)

class test_False_key(unittest.TestCase):
    def test(self):
        s = dictionary()
        s[False] = 1
        self.assertTrue(False in s)
        self.assertEqual(s[False], 1)

class test_collide(unittest.TestCase):
    def test(self):
        s = dictionary()
        s[0] = "zero"
        s[10] = "ten"
        self.assertEqual(len(s), 2)
        self.assertTrue(0 in s)
        self.assertTrue(10 in s)

''' B-level work
    Add doubling and rehashing when load goes over 75%
    Add __delitem__(self, key)
'''

# Doubling and rehashing when load goes over 75%
class test_double(unittest.TestCase):
    def test(self):
        s = dictionary()
        s[0] = "zero"
        s[1] = "one"
        s[2] = "two"
        s[3] = "three"
        s[4] = "four"
        s[5] = "five"
        self.assertEqual(s._dictionary__limit, 10)
        s[6] = "six"
        s[7] = "seven"
        self.assertEqual(s._dictionary__limit, 20)
        s[8] = "ocho"
        s[9] = "nine"
        s[10] = "ten"
        s[11] = "eleven"
        s[12] = "twelve"
        s[13] = "thirteen"
        self.assertEqual(s[1], "one")
        self.assertEqual(s[11], "eleven")
        self.assertTrue(s.__len__(), 14)
        self.assertEqual(s._dictionary__limit, 20)

# Delete item
class test_delete(unittest.TestCase):
    def test(self):
        s = dictionary()
        s[0] = "zero"
        s[1] = "one"
        s[2] = "two"
        s[3] = "three"
        s[4] = "four"
        self.assert_(s.__delitem__(0))
        self.assert_(s.__delitem__(4))
        self.assertTrue(s.__len__(), 3)
        self.assertFalse(0 in s)
        self.assertTrue(4 not in s)

''' A-level work
    Add halving and rehashing when load goes below 25%
    Add keys()
    Add values()
'''

# halving and rehashing when load goes below 25%
class test_halve(unittest.TestCase):
    def test(self):
        s = dictionary()
        s[0] = "zero"
        s[1] = "one"
        s[2] = "two"
        s[3] = "three"
        s[4] = "four"
        s.__delitem__(4)
        s.__delitem__(3)
        s.__delitem__(2)
        s.__delitem__(1)
        self.assertEqual(s[0], "zero")
        self.assertEqual(s._dictionary__limit, 5)

# Return keys
class test_keys(unittest.TestCase):
    def test(self):
        s = dictionary()
        s[1] = "one"
        s[2] = "two"
        s[3] = "three"
        self.assertEqual(s.__keys__(), [1, 2, 3])

# Return values
class test_values(unittest.TestCase):
    def test(self):
        s = dictionary()
        s[1] = "one"
        s[2] = "two"
        s[3] = "three"
        self.assertEqual(s.__values__(), ["one", "two", "three"])

''' Extra credit
    Add __eq__()
    Add items(), returns a list of tuples "a list of D's (key, value) pairs, as 2-tuples"
'''

#
class test_equal(unittest.TestCase):
    def test(self):
        a = dictionary()
        a[0] = "zero"
        b = dictionary()
        b[0] = "zero"
        self.assertTrue(a.__equal__(b), True)

# Return items
class test_items(unittest.TestCase):
    def test(self):
        s = dictionary()
        s[1] = "one"
        s[2] = "two"
        s[3] = "three"
        self.assertEqual(s.__items__(), [(1, "one"), (2, "two"), (3, "three")])

if '__main__' == __name__:
    unittest.main()
