from __future__ import print_function
import unittest

'''
Description: CS2050 Assignment 2 - Dictionaries
Author: John Samson
Version: Python 3.6 (32-bit)
Help provided to: 
Help received from: dfaller, nbarnes
'''

'''
    Implement a dictionary using chaining.
    You may assume every key has a hash() method, e.g.:
    >>> hash(1)
    1
    >>> hash('hello world')
    -2324238377118044897
'''

class dictionary:
    def __init__(self, init=None):
        self.__limit = 10
        self.__items = [[] for _ in range(self.__limit)]
        self.__count = 0
        if init:
            for i in init:
                self.__setitem__(i[0], i[1])

    def __limit__(self, limit):
        self.__limit *= limit
        return self.__limit

    # return self.__count
    def __len__(self):
        return self.__count

    def __flattened(self):
        return [item for inner in self.__items for item in inner]

    def __iter__(self):
        return(iter(self.__flattened()))

    def __str__(self):
        return(str(self.__flattened()))

    # Add to the dictionary.
    def __setitem__(self, key, value):
        hash_key = hash(key)% self.__limit
        self.__items[hash_key] = [key, value]
        self.__count += 1
        # if self.__count > self.__limit * (75//100):
        #     self.__rehash__()
        return self

    # Retrieve from the dictionary
    def __getitem__(self, key):
        hash_key = hash(key)% self.__limit
        tmp = self.__items[hash_key][1]
        return tmp

    # Implements the 'in' operator.
    def __contains__(self, key):
        hash_key = hash(key)% self.__limit
        for key in self.__items:
            if self.__items[hash_key] != None:
                tmp = True
            else:
                tmp = False
        return tmp

    # Doubling and rehashing when load goes over 75%
    def __rehash__(self):
        if self.__count > self.__limit * (75//100):
            tmp = self
            new = dictionary()
            self.__items = new
            self.__limit *= 2
            self.__items = [[] for _ in range(self.__limit)]
            self.__count = 0
            for i in tmp:
                self.__setitem__(tmp[i][0], tmp[i][1])
        elif self.__count < self.__limit * (25//100):
            tmp = self
            new = dictionary()
            self.__items = new
            self.__limit //= 2
            self.__items = [[] for _ in range(self.__limit)]
            self.__count = 0
            for i in tmp:
                self.__setitem__(tmp[i][i[0]], tmp[i][i[1]])
        return self

                # self.__limit = 10
        # self.__items = [[] for _ in range(self.__limit)]
        # self.__count = 0

    # Delete item
    def __delitem__(self, key):
        hash_key = hash(key)% self.__limit
        self.__items[hash_key] = None
        self.__count -= 1
        # if self.__count < self.__limit * (25//100):
        #     self.__rehash__()
        return self

    # Halving and rehashing when load goes below 25%
    def __halve__(self):
        return self

    # Print keys
    def __keys__(self):
        for key in self.__items:
            hash_key = hash(key) % self.__limit
            if self.__items[hash_key] != None:
                tmp += hash_key
        return tmp

    # Print values
    def __values__(self):
        hash_key = hash(key)% self.__limit
        return self

''' C-level work
'''
class test_add_two(unittest.TestCase):
    def test(self):
        s = dictionary()
        s[1] = "one"
        s[2] = "two"
        self.assertEqual(len(s), 2)
        self.assertEqual(s[1], "one")
        self.assertEqual(s[2], "two")

class test_add_twice(unittest.TestCase):
    def test(self):
        s = dictionary()
        s[1] = "one"
        s[1] = "one"
        # self.assertEqual(len(s), 1)
        self.assertEqual(s[1], "one")

class test_store_false(unittest.TestCase):
    def test(self):
        s = dictionary()
        s[1] = False
        self.assertTrue(1 in s)
        self.assertTrue(1 in s)
        self.assertFalse(s[1])

class test_store_none(unittest.TestCase):
    def test(self):
        s = dictionary()
        s[1] = None
        self.assertTrue(1 in s)
        self.assertEqual(s[1], None)

class test_none_key(unittest.TestCase):
    def test(self):
        s = dictionary()
        s[None] = 1
        self.assertTrue(None in s)
        self.assertEqual(s[None], 1)

class test_False_key(unittest.TestCase):
    def test(self):
        s = dictionary()
        s[False] = 1
        self.assertTrue(False in s)
        self.assertEqual(s[False], 1)

class test_collide(unittest.TestCase):
    def test(self):
        s = dictionary()
        s[0] = "zero"
        s[10] = "ten"
        self.assertEqual(len(s), 2)
        self.assertTrue(0 in s)
        self.assertTrue(10 in s)

''' B-level work
    Add doubling and rehashing when load goes over 75%
    Add __delitem__(self, key)
'''

# Doubling and rehashing when load goes over 75%
class test_rehash_large(unittest.TestCase):
    def test(self):
        s = dictionary()
        s[0] = "zero"
        s[1] = "one"
        s[2] = "two"
        s[3] = "three"
        s[4] = "four"
        s[5] = "five"
        s[6] = "six"
        s[7] = "seven"
        s[8] = "ocho"
        s.__rehash__()
        s[9] = "nine"
        s[10] = "ten"
        s[11] = "eleven"
        self.assertEqual(s[11], "eleven")
        self.assertEquals(s._dictionary__limit, 20)

# __delitem__(self, key)
class test_delete(unittest.TestCase):
    def test(self):
        s = dictionary()
        s[0] = "zero"
        s[1] = "one"
        s[2] = "two"
        s[3] = "three"
        s[4] = "four"
        self.assert_(s.__delitem__(0))
        self.assert_(s.__delitem__(4))
        self.assertTrue(s.__len__(), 3)
        self.assertFalse(0 in s)
        self.assertTrue(4 not in s)

''' A-level work
    Add halving and rehashing when load goes below 25%
    Add keys()
    Add values()
'''

# halving and rehashing when load goes below 25%
class test_rehash_small(unittest.TestCase):
    def test(self):
        s = dictionary()
        s[0] = "zero"
        s[1] = "one"
        s[2] = "two"
        s[3] = "three"
        s[4] = "four"
        s.__delitem__(4)
        s.__rehash__()
        s.__delitem__(3)
        s.__rehash__()
        s.__delitem__(2)
        s.__rehash__()
        self.assertEquals(s._dictionary__limit, 5)

# __delitem__(self, key)
class test_keys(unittest.TestCase):
    def test(self):
        s = dictionary()
        s[0] = "zero"
        s[2] = "two"
        s[4] = "four"
        s[6] = "six"
        self.assertEqual(self.assert_(s.__keys__()), "")

# __delitem__(self, key)
class test_values(unittest.TestCase):
    def test(self):
        s = dictionary()
        s[0] = "zero"
        s[2] = "two"
        s[4] = "four"
        s[6] = "six"
        self.assertEqual(self.assert_(s.__values__()), "")

''' Extra credit
    Add __eq__()
    Add items(), returns a list of tuples "a list of D's (key, value) pairs, as 2-tuples"
'''

# __delitem__(self, key)
class test_equal(unittest.TestCase):
    def test(self):
        s = dictionary()
        s[0] = "zero"

# __delitem__(self, key)
class test_items(unittest.TestCase):
    def test(self):
        s = dictionary()
        s[0] = "zero"

if '__main__' == __name__:
    unittest.main()
