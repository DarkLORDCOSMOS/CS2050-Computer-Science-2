from __future__ import print_function
import unittest, sys

'''
    Given the location of two queens, find if they are safe
    from each other.
'''
def safe(one, two):
    if one[0] == two[0]: return False
    if one[1] == two[1]: return False
    if abs(two[0]-one[0]) == abs(two[1]-one[1]): return False
    return True

def print_solution(size, solutions):
    print("solutions = ", solutions)
    print("for:", size)
    if solutions == []:
        print("no solution found")
        return

    print('-' * size)

    for placed in solutions:
        for i in range(size):
            for j in range(size):
                if [i, j] in placed:
                    sys.stdout.write("Q")
                else:
                    sys.stdout.write(".")
            print()

        print('-' * size)

def solve_queens(size, row, placed, solutions):
    # if the row is greater than the size of the board, we're done
    if row == size:
        return placed

    # go through the columns in this row
    for column in range(size):

        #     go through all the already placed queens and see if
        #         placing a new queen at (row, column) is safe
        tmp = True
        for queen in placed:
            if tmp and not safe([row, column], queen):
                tmp = False
                break

        #     if it is
        # if tmp:
        #     foo = solve_queens(size, row + 1, placed + [[row, column]])
        #     if foo:
        #         return foo
        if tmp:
            solution = solve_queens(size, row + 1, placed + [[row, column]], solutions)
            if solution:
                if solution not in solutions and solution != solutions:
                    print("solution is not in solutions!")
                    solutions.append(solution)
                else:
                    print("new solution needed!")
                    for queen in placed:
                        placed.remove(queen)
                        if solve_queens(size, 0, placed, solutions) != solution:
                            # print("placed = ", placed)
                            # print("solution = ", solution)
                            # print("solutions = ", solutions)
                            return solve_queens(size, 0, placed, solutions)
                        # else:
                        #     # solution = []
                        #     return solutions
                        return solutions
                            # print("solutions = ", solutions)
                    return solutions
                        # if solution:
                        #     solutions.append(solution)
                        # else:
                        #     return solutions
                print("solution  = ", solution)
                print("solutions = ", solutions)
                return solutions
    return []

# for queen in placed:
#     placed.remove(queen)
#     solution = solve_queens(size, 0, placed, solutions)
#     if solution:
#         if solution not in solutions and solution != solutions:
#             solutions.append(solution)
#         else:
#             return solutions

# print("solution found!")
# if solution not in solutions:
#     print("new solution found!")
#     print("solution = ", solution)
#     print("solutions = ", solutions)
#     print("appending solution...")
#     solutions.append(solution)
#     print("solutions = ", solutions)
# else:
#     print("duplicate solution found!")
#     print("solutions = ", solutions)
#     solve_queens(size, 0, placed + [[row, column]], solutions)
#     print("solutions = ", solutions)


class test_Queens(unittest.TestCase):
    def test_safe(self):
        self.assertTrue(safe([0, 1], [3, 2]))
    def test_unsafe(self):
        self.assertFalse(safe([1, 1], [1, 2]))
    def test_print_4(self):
        placed = solve_queens(4, 0, [], [])
        # self.assert_(print_solution(4, placed))
        print_solution(4, placed)
    def test_print_3(self):
        placed = solve_queens(3, 0, [], [])
        # self.assert_(print_solution(4, placed))
        print_solution(3, placed)
    def test_print_8(self):
        placed = solve_queens(8, 0, [], [])
        print_solution(8, placed)

# For extra credit, have your program solve the problem of any size.
# For extra-extra create, have you program find all the solutions of
# a given size; for example, there are 92 solutions for eight queens.
