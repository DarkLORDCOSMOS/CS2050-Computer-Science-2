from __future__ import print_function
import unittest, sys

'''
    Given the location of two queens, find if they are safe
    from each other.
'''
def safe(one, two):
    if one[0] == two[0]: return False
    if one[1] == two[1]: return False
    if abs(two[0]-one[0]) == abs(two[1]-one[1]): return False
    return True

def print_solution(size, placed):
    print("for:", size)
    if placed == []:
        print("no solution found")
        return

    print('-' * size)

    for i in range(size):
        for j in range(size):
            if [i, j] in placed:
                sys.stdout.write("Q")
            else:
                sys.stdout.write(".")
        print()

    print('-' * size)

def solve_queens(size, row, placed):
    # if the row is greater than the size of the board, we're done
    if row == size:
        return placed

    # go through the columns in this row
    for column in range(size):
    # 0 to size-1

    #     go through all the already placed queens and see if
    #         placing a new queen at (row, column) is safe
        tmp = True
        for queen in placed:
            if tmp and not safe([row, column], queen):
                tmp = False
                break

    #     if it is
    #         tmp = solve_queens(size, row+1, placed+[(row, column)])
    #         if tmp
    #             return tmp
        if tmp:
            foo = solve_queens(size, row + 1, placed + [[row, column]])
            if foo:
                return foo
    return []


class test_Queens(unittest.TestCase):
    def test_unsafe(self):
        self.assertFalse(safe([1, 1], [1, 2]))
    def test_print_4(self):
        placed = solve_queens(4, 0, [])
        # self.assert_(print_solution(4, placed))
        print_solution(4, placed)
    def test_print_3(self):
        placed = solve_queens(3, 0, [])
        # self.assert_(print_solution(4, placed))
        print_solution(3, placed)
    def test_print_8(self):
        placed = solve_queens(8, 0, [])
        # self.assert_(print_solution(4, placed))
        print_solution(8, placed)

# For extra credit, have your program solve the problem of any size.
# For extra-extra create, have you program find all the solutions of
# a given size; for example, there are 92 solutions for eight queens.
